!function(){"use strict";class e{constructor(e,t,r,s,n){this._data=e,this._name=e.name,this._link=e.link,this._cardSelector=t,this._handleImageClick=r,this._handleDeleteClick=s,this._handleLikeClick=n,this.cardId=e._id,this._islike=e.islike}_getTemplate(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardElement}_setEventListeners(){this._likeButton=this._cardElement.querySelector(".card__like"),this._likeButton.addEventListener("click",(()=>{this._handleLikeClick(this)})),this._cardElement.querySelector(".card__trash").addEventListener("click",(()=>{this._handleDeleteClick(this)})),this._imageElement.addEventListener("click",(()=>{this._handleImageClick(this._name,this._link)}))}generateCard(){return this._cardElement=this._getTemplate(),this._imageElement=this._cardElement.querySelector(".card__image"),this._imageElement.src=this._link,this._imageElement.alt=this._name,this._cardElement.querySelector(".card__name").textContent=this._name,this._setEventListeners(),this._cardElement}removeCard(){this._cardElement.remove(),this._cardElement=null}getId(){return this.cardId}}class t{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t,this._submitButton=this._formElement.querySelector(this._submitButtonSelector)}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_hasInvalidInput(){return!this._inputEls.every((e=>e.validity.valid))}_showInputError(e){this._errorMessageEl=this._formElement.querySelector(`#${e.id}-error`),e.classList.add(this._inputErrorClass),this._errorMessageEl.textContent=e.validationMessage,this._errorMessageEl.classList.add(this._errorClass)}_hideInputError(e){this._errorMessageEl=this._formElement.querySelector(`#${e.id}-error`),e.classList.remove(this._inputErrorClass),this._errorMessageEl.textContent=e.validationMessage,this._errorMessageEl.classList.remove(this._errorClass)}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_toggleButtonState(){this._hasInvalidInput(this._inputEls)?this.disableButton():this._enableButton()}_setEventListener(){this._inputEls=[...this._formElement.querySelectorAll(this._inputSelector)],this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))})),this._formElement.addEventListener("submit",(e=>{e.preventDefault()}))}resetValidation(){this._inputEls.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListener()}}class r{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEcsClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEcsClose)}_handleEcsClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupElement.querySelector("#modal-close-button").addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("click",(e=>{e.target===e.currentTarget&&this.close()}))}}class s extends r{constructor(e){let{popupSelector:t,handleFormSubmit:r}=e;super({popupSelector:t}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._popupInputs=this._popupForm.querySelectorAll(".modal__input"),this._popupButton=this._popupForm.querySelector(".modal__button"),this._handleFormSubmit=r}renderLoading(e){this._popupButton.textContent=e?"Saving...":"Submit"}_getInputValues(){const e={};return this._popupInputs.forEach((t=>{e[t.name]=t.value})),console.log("Form Input Values:",e),e}_setInputValues(e){this._popupInputs.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())})),super.setEventListeners()}}const n=document.querySelector("#profile-edit-button"),i=document.querySelector("#profile-form"),o=document.querySelector("#card-add-button"),a=document.querySelector("#add-card-form"),l=document.querySelector("#profile-title-input"),c=document.querySelector("#profile-description-input"),d=document.querySelector("#avatar-edit-button"),h=new class{constructor(e){let{baseUrl:t,headers:r}=e;this._baseUrl=t,this._headers=r}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error:${e.status}`)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then(this._checkResponse)}editUserInfo(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.description})}).then(this._checkResponse)}editUserAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.avatar})}).then(this._checkResponse)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then(this._checkResponse)}addNewCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then(this._checkResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}setCardLike(e,t){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:t,headers:this._headers}).then(this._checkResponse)}getAppInfo(){}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"f0236218-80b1-4e28-bbd2-7b2cb80c1217","Content-Type":"application/json"}}),u={};var _;_={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},Array.from(document.querySelectorAll(_.formSelector)).forEach((e=>{const r=new t(_,e),s=e.getAttribute("id");u[s]=r,r.enableValidation()}));const m=new class{constructor(e,t,r){this._nameElement=document.querySelector(e),this._jobElement=document.querySelector(t),this._avatarElement=document.querySelector(r)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent}}setUserInfo(e){this._nameElement.textContent=e.name,this._jobElement.textContent=e.description}setUserAvatar(e){this._avatarElement.src=e.avatar}}(".profile__name",".profile__description",".profile__avatar");h.getUserInfo().then((e=>{m.setUserInfo({name:e.name,description:e.about})})).catch((e=>{console.error(e)}));const p=new s({popupSelector:"#profile-edit-modal",handleFormSubmit:function(e){p.renderLoading(!0),h.editUserInfo(e).then((e=>{m.setUserInfo({name:e.name,description:e.about})})).catch((e=>{console.error(e)})).finally((()=>{p.renderLoading(!1)})),p.close()}});p.setEventListeners();const E=new s({popupSelector:"#card-add-modal",handleFormSubmit:function(e){const t=e.title,r=e.link;E.renderLoading(!0),h.addNewCard({name:t,link:r}).then((e=>{const t=k(e);S.addItem(t)})).catch((e=>{console.error(e)})).finally((()=>{E.renderLoading(!1)})),E.close(),a.reset(),u[a.getAttribute("id")].disableButton()}});E.setEventListeners();const v=new s({popupSelector:"#profile-avatar-modal",handleFormSubmit:function(e){v.renderLoading(!0),h.editUserAvatar(e).then((e=>{m.setUserAvatar({avatar:e.avatar})})).catch((e=>{console.error(e)})).finally((()=>{v.renderLoading(!1)})),v.close()}});v.setEventListeners();const f=new class extends r{constructor(e){super({popupSelector:e}),this._cardImage=this._popupElement.querySelector(".modal__exhibit-image")}open(e,t){this._cardImage.src=t,this._cardImage.alt=e,this._popupElement.querySelector(".modal__exhibit-image-name").textContent=e,super.open()}}("#image-modal");f.setEventListeners();const b=new class extends r{constructor(e){let{popupSelector:t}=e;super({popupSelector:t}),this._popupButton=this._popupElement.querySelector(".modal__button")}renderLoading(e){this._popupButton.textContent=e?"Deleting...":"Yes"}confirmDelete(e){this._handleFormSubmit=e}setEventListeners(){super.setEventListeners(),this._popupButton.addEventListener("click",(e=>{e.preventDefault(),this._handleFormSubmit()}))}}({popupSelector:"#confirmation-modal",handleFormSubmit:L});b.setEventListeners();const S=new class{constructor(e,t){let{renderer:r}=e;this._renderer=r,this._container=document.querySelector(t)}renderItems(e){e.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({renderer:e=>{S.addItem(e)}},".cards__list");function g(e,t){f.open(e,t)}function k(t){return new e(t,"#card-template",g,L,y).generateCard()}function L(e){b.open(),b.confirmDelete((()=>{h.deleteCard(e.getId()).then((()=>{e.removeCard(),b.close()})).catch((e=>{console.error("Card deletion API failed:",e)}))}))}function y(e){const t=e._likeButton.classList.contains("card__like_active")?"DELETE":"PUT";h.setCardLike(e.getId(),t).then((()=>{e._likeButton.classList.toggle("card__like_active")})).catch((e=>{console.error("Like Button Error",e)}))}h.getInitialCards().then((e=>e.map((e=>({name:e.name,link:e.link,_id:e._id}))))).catch((e=>(console.error(e),[]))).then((e=>{const t=e.map((e=>k(e)));S.renderItems(t)})).catch((e=>{console.error(e)})),n.addEventListener("click",(()=>{!function(){const e=m.getUserInfo();l.value=e.name,c.value=e.job}(),u[i.getAttribute("id")].resetValidation(),p.open()})),o.addEventListener("click",(()=>{E.open()})),d.addEventListener("click",(()=>{v.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,