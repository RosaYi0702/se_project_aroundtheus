!function(){"use strict";class e{constructor(e,t,s,r,n){this._name=e.name,this._link=e.link,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteClick=r,this._handleLikeClick=n,this.cardId=e._id,this._isLiked=e.isLiked}_getTemplate(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardElement}_setEventListeners(){this._likeButton=this._cardElement.querySelector(".card__like"),this._likeButton.addEventListener("click",(()=>{this._handleLikeClick(this)})),this._cardElement.querySelector(".card__trash").addEventListener("click",(()=>{this._handleDeleteClick(this)})),this._imageElement.addEventListener("click",(()=>{this._handleImageClick(this._name,this._link)}))}generateCard(){return this._cardElement=this._getTemplate(),this._imageElement=this._cardElement.querySelector(".card__image"),this._imageElement.src=this._link,this._imageElement.alt=this._name,this._cardElement.querySelector(".card__name").textContent=this._name,this._setEventListeners(),this.updateLikeButton(),this._cardElement}removeCard(){this._cardElement.remove(),this._cardElement=null}getId(){return this.cardId}getLikeMethod(){return this._currentStatus=this._likeButton.classList.contains("card__like_active"),console.log(this._currentStatus),this._currentStatus?"DELETE":"PUT"}updateLikeButton(){return this._isLiked?this._likeButton.classList.add("card__like_active"):this._likeButton.classList.remove("card__like_active")}updateLiked(e){this._isLiked=e,this.updateLikeButton()}}class t{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t,this._submitButton=this._formElement.querySelector(this._submitButtonSelector)}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_hasInvalidInput(){return!this._inputEls.every((e=>e.validity.valid))}_showInputError(e){this._errorMessageEl=this._formElement.querySelector(`#${e.id}-error`),e.classList.add(this._inputErrorClass),this._errorMessageEl.textContent=e.validationMessage,this._errorMessageEl.classList.add(this._errorClass)}_hideInputError(e){this._errorMessageEl=this._formElement.querySelector(`#${e.id}-error`),e.classList.remove(this._inputErrorClass),this._errorMessageEl.textContent=e.validationMessage,this._errorMessageEl.classList.remove(this._errorClass)}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_toggleButtonState(){this._hasInvalidInput(this._inputEls)?this.disableButton():this._enableButton()}_setEventListener(){this._inputEls=[...this._formElement.querySelectorAll(this._inputSelector)],this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))})),this._formElement.addEventListener("submit",(e=>{e.preventDefault()}))}resetValidation(){this._inputEls.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListener()}}class s{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEcsClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEcsClose)}_handleEcsClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupElement.querySelector("#modal-close-button").addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("click",(e=>{e.target===e.currentTarget&&this.close()}))}}class r extends s{constructor(e){let{popupSelector:t,handleFormSubmit:s}=e;super({popupSelector:t}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._popupInputs=this._popupForm.querySelectorAll(".modal__input"),this._popupButton=this._popupForm.querySelector(".modal__button"),this._handleFormSubmit=s,this._submitBtnText=this._popupButton.textContent}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._popupButton.textContent=e?t:this._submitBtnText}_getInputValues(){const e={};return this._popupInputs.forEach((t=>{e[t.name]=t.value})),console.log("Form Input Values:",e),e}_setInputValues(e){this._popupInputs.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())})),super.setEventListeners()}}const n=document.querySelector("#profile-edit-button"),i=document.querySelector("#profile-form"),o=document.querySelector("#card-add-button"),a=document.querySelector("#add-card-form"),l=document.querySelector("#profile-title-input"),d=document.querySelector("#profile-description-input"),c=document.querySelector("#avatar-edit-button"),u=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_request(e,t){return fetch(e,t).then(this._checkResponse)}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error:${e.status}`)}getUserInfo(){return this._request(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers})}editUserInfo(e){return this._request(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.description})})}editUserAvatar(e){return this._request(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.avatar})})}getInitialCards(){return this._request(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers})}addNewCard(e){return this._request(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})})}deleteCard(e){return this._request(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers})}setCardLike(e,t){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:t,headers:this._headers})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"556b7174-cdb9-4bbc-853b-d91bc60928df","Content-Type":"application/json"}}),h={};function _(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Saving...",r=arguments.length>3?arguments[3]:void 0;e.renderLoading(!0,s),t().then((()=>{r&&r(),e.close()})).catch((e=>{console.error(e)})).finally((()=>{e.renderLoading(!1)}))}var m;m={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},Array.from(document.querySelectorAll(m.formSelector)).forEach((e=>{const s=new t(m,e),r=e.getAttribute("id");h[r]=s,s.enableValidation()}));const p=new class{constructor(e,t,s){this._nameElement=document.querySelector(e),this._jobElement=document.querySelector(t),this._avatarElement=document.querySelector(s)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent}}setUserInfo(e){this._nameElement.textContent=e.name,this._jobElement.textContent=e.description}setUserAvatar(e){this._avatarElement.src=e.avatar}}(".profile__name",".profile__description",".profile__avatar");u.getUserInfo().then((e=>{p.setUserInfo({name:e.name,description:e.about})})).catch((e=>{console.error(e)}));const E=new r({popupSelector:"#profile-edit-modal",handleFormSubmit:function(e){_(E,(function(){return u.editUserInfo(e).then((e=>{p.setUserInfo({name:e.name,description:e.about})}))}))}});E.setEventListeners(),n.addEventListener("click",(()=>{!function(){const e=p.getUserInfo();l.value=e.name,d.value=e.job}(),h[i.getAttribute("id")].resetValidation(),E.open()})),u.getUserInfo().then((e=>{console.log("get res",e),p.setUserAvatar({avatar:e.avatar})})).catch((e=>{console.error(e)}));const v=new r({popupSelector:"#profile-avatar-modal",handleFormSubmit:function(e){_(v,(function(){return u.editUserAvatar(e).then((e=>{p.setUserAvatar({avatar:e.avatar})}))}))}});function S(t){return new e(t,"#card-template",L,C,y).generateCard()}v.setEventListeners(),c.addEventListener("click",(()=>{v.open()}));const b=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}renderItems(e){e.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({renderer:e=>{b.addItem(e)}},".cards__list");u.getInitialCards().then((e=>{console.log("data",e);const t=e.map((e=>S(e)));b.renderItems(t)})).catch((e=>{console.error(e)}));const g=new r({popupSelector:"#card-add-modal",handleFormSubmit:function(e){const t=e.title,s=e.link;_(g,(function(){return u.addNewCard({name:t,link:s}).then((e=>{const t=S(e);b.addItem(t)}))}),"Saving...",(()=>{a.reset()})),h[a.getAttribute("id")].disableButton()}});g.setEventListeners(),o.addEventListener("click",(()=>{g.open()}));const f=new class extends s{constructor(e){super({popupSelector:e}),this._cardImage=this._popupElement.querySelector(".modal__exhibit-image")}open(e,t){this._cardImage.src=t,this._cardImage.alt=e,this._popupElement.querySelector(".modal__exhibit-image-name").textContent=e,super.open()}}("#image-modal");function L(e,t){f.open(e,t)}f.setEventListeners();const k=new class extends s{constructor(e){let{popupSelector:t}=e;super({popupSelector:t}),this._popupButton=this._popupElement.querySelector(".modal__button")}renderLoading(e){this._popupButton.textContent=e?"Deleting...":"Yes"}confirmDelete(e){this._handleFormSubmit=e}setEventListeners(){super.setEventListeners(),this._popupButton.addEventListener("click",(e=>{e.preventDefault(),this._handleFormSubmit()}))}}({popupSelector:"#confirmation-modal",handleFormSubmit:C});function C(e){k.open(),k.confirmDelete((()=>{u.deleteCard(e.getId()).then((()=>{e.removeCard(),k.close()})).catch((e=>{console.error("Card deletion API failed:",e)}))}))}function y(e){u.setCardLike(e.getId(),e.getLikeMethod()).then((t=>{console.log("card get like method",e.getLikeMethod()),console.log(t),e.updateLiked(t.isLiked)})).catch((e=>{console.error("Like Button Error",e)}))}k.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,